#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.75.3.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::types::CashuTransaction;
use crate::types::LNTransaction;
use crate::types::Mint;
use crate::types::Transaction;
use crate::types::TransactionStatus;

// Section: wire functions

fn wire_init_db_impl(port_: MessagePort, path: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "init_db",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_path = path.wire2api();
            move |task_callback| init_db(api_path)
        },
    )
}
fn wire_get_balances_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_balances",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| get_balances(),
    )
}
fn wire_create_wallet_impl(port_: MessagePort, url: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_wallet",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_url = url.wire2api();
            move |task_callback| create_wallet(api_url)
        },
    )
}
fn wire_get_wallets_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_wallets",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| get_wallets(),
    )
}
fn wire_remove_wallet_impl(port_: MessagePort, url: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "remove_wallet",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_url = url.wire2api();
            move |task_callback| remove_wallet(api_url)
        },
    )
}
fn wire_add_new_wallets_impl(port_: MessagePort, _mints: impl Wire2Api<Vec<String>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "add_new_wallets",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api__mints = _mints.wire2api();
            move |task_callback| add_new_wallets(api__mints)
        },
    )
}
fn wire_set_mints_impl(port_: MessagePort, mints: impl Wire2Api<Vec<String>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "set_mints",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_mints = mints.wire2api();
            move |task_callback| set_mints(api_mints)
        },
    )
}
fn wire_check_spendable_impl(
    port_: MessagePort,
    transaction: impl Wire2Api<Transaction> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "check_spendable",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_transaction = transaction.wire2api();
            move |task_callback| check_spendable(api_transaction)
        },
    )
}
fn wire_receive_token_impl(port_: MessagePort, encoded_token: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "receive_token",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_encoded_token = encoded_token.wire2api();
            move |task_callback| receive_token(api_encoded_token)
        },
    )
}
fn wire_send_impl(
    port_: MessagePort,
    amount: impl Wire2Api<u64> + UnwindSafe,
    active_mint: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "send",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_amount = amount.wire2api();
            let api_active_mint = active_mint.wire2api();
            move |task_callback| send(api_amount, api_active_mint)
        },
    )
}
fn wire_request_mint_impl(
    port_: MessagePort,
    amount: impl Wire2Api<u64> + UnwindSafe,
    mint_url: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "request_mint",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_amount = amount.wire2api();
            let api_mint_url = mint_url.wire2api();
            move |task_callback| request_mint(api_amount, api_mint_url)
        },
    )
}
fn wire_mint_token_impl(
    port_: MessagePort,
    amount: impl Wire2Api<u64> + UnwindSafe,
    hash: impl Wire2Api<String> + UnwindSafe,
    mint: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mint_token",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_amount = amount.wire2api();
            let api_hash = hash.wire2api();
            let api_mint = mint.wire2api();
            move |task_callback| mint_token(api_amount, api_hash, api_mint)
        },
    )
}
fn wire_melt_impl(
    port_: MessagePort,
    amount: impl Wire2Api<u64> + UnwindSafe,
    invoice: impl Wire2Api<String> + UnwindSafe,
    mint: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "melt",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_amount = amount.wire2api();
            let api_invoice = invoice.wire2api();
            let api_mint = mint.wire2api();
            move |task_callback| melt(api_amount, api_invoice, api_mint)
        },
    )
}
fn wire_decode_invoice_impl(port_: MessagePort, invoice: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "decode_invoice",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_invoice = invoice.wire2api();
            move |task_callback| decode_invoice(api_invoice)
        },
    )
}
fn wire_get_transactions_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_transactions",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| get_transactions(),
    )
}
fn wire_get_mints_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_mints",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| get_mints(),
    )
}
fn wire_get_active_mint_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_active_mint",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| get_active_mint(),
    )
}
fn wire_set_active_mint_impl(
    port_: MessagePort,
    mint_url: impl Wire2Api<Option<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "set_active_mint",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_mint_url = mint_url.wire2api();
            move |task_callback| set_active_mint(api_mint_url)
        },
    )
}
fn wire_decode_token_impl(port_: MessagePort, encoded_token: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "decode_token",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_encoded_token = encoded_token.wire2api();
            move |task_callback| decode_token(api_encoded_token)
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}

impl Wire2Api<TransactionStatus> for i32 {
    fn wire2api(self) -> TransactionStatus {
        match self {
            0 => TransactionStatus::Sent,
            1 => TransactionStatus::Received,
            2 => TransactionStatus::Pending,
            3 => TransactionStatus::Failed,
            _ => unreachable!("Invalid variant for TransactionStatus: {}", self),
        }
    }
}
impl Wire2Api<u64> for u64 {
    fn wire2api(self) -> u64 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for CashuTransaction {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_dart(),
            self.status.into_dart(),
            self.time.into_dart(),
            self.amount.into_dart(),
            self.mint.into_dart(),
            self.token.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CashuTransaction {}

impl support::IntoDart for InvoiceInfo {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.amount.into_dart(),
            self.hash.into_dart(),
            self.memo.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for InvoiceInfo {}

impl support::IntoDart for LNTransaction {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_dart(),
            self.status.into_dart(),
            self.time.into_dart(),
            self.amount.into_dart(),
            self.mint.into_dart(),
            self.bolt11.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for LNTransaction {}

impl support::IntoDart for Mint {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.url.into_dart(),
            self.active_keyset.into_dart(),
            self.keysets.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Mint {}

impl support::IntoDart for RequestMintInfo {
    fn into_dart(self) -> support::DartAbi {
        vec![self.pr.into_dart(), self.hash.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for RequestMintInfo {}

impl support::IntoDart for TokenData {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.encoded_token.into_dart(),
            self.mint.into_dart(),
            self.amount.into_dart(),
            self.memo.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TokenData {}

impl support::IntoDart for Transaction {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::CashuTransaction(field0) => vec![0.into_dart(), field0.into_dart()],
            Self::LNTransaction(field0) => vec![1.into_dart(), field0.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Transaction {}
impl support::IntoDart for TransactionStatus {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Sent => 0,
            Self::Received => 1,
            Self::Pending => 2,
            Self::Failed => 3,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TransactionStatus {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
