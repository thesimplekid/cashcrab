// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.75.3.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

class RustImpl implements Rust {
  final RustPlatform _platform;
  factory RustImpl(ExternalLibrary dylib) => RustImpl.raw(RustPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory RustImpl.wasm(FutureOr<WasmModule> module) =>
      RustImpl(module as ExternalLibrary);
  RustImpl.raw(this._platform);
  Future<void> initDb({required String path, dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init_db(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kInitDbConstMeta,
      argValues: [path],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitDbConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_db",
        argNames: ["path"],
      );

  Future<String> getBalances({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_balances(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kGetBalancesConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetBalancesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_balances",
        argNames: [],
      );

  Future<void> createWallet({required String url, dynamic hint}) {
    var arg0 = _platform.api2wire_String(url);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_wallet(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kCreateWalletConstMeta,
      argValues: [url],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateWalletConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_wallet",
        argNames: ["url"],
      );

  Future<List<String>> getWallets({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_wallets(port_),
      parseSuccessData: _wire2api_StringList,
      constMeta: kGetWalletsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetWalletsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_wallets",
        argNames: [],
      );

  Future<String> removeWallet({required String url, dynamic hint}) {
    var arg0 = _platform.api2wire_String(url);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_remove_wallet(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kRemoveWalletConstMeta,
      argValues: [url],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoveWalletConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remove_wallet",
        argNames: ["url"],
      );

  Future<void> addNewWallets({required List<String> mints, dynamic hint}) {
    var arg0 = _platform.api2wire_StringList(mints);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_add_new_wallets(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kAddNewWalletsConstMeta,
      argValues: [mints],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddNewWalletsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "add_new_wallets",
        argNames: ["mints"],
      );

  Future<List<String>> setMints({required List<String> mints, dynamic hint}) {
    var arg0 = _platform.api2wire_StringList(mints);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_mints(port_, arg0),
      parseSuccessData: _wire2api_StringList,
      constMeta: kSetMintsConstMeta,
      argValues: [mints],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetMintsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_mints",
        argNames: ["mints"],
      );

  Future<bool> checkSpendable(
      {required Transaction transaction, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_transaction(transaction);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_check_spendable(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kCheckSpendableConstMeta,
      argValues: [transaction],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCheckSpendableConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "check_spendable",
        argNames: ["transaction"],
      );

  Future<Transaction> receiveToken(
      {required String encodedToken, dynamic hint}) {
    var arg0 = _platform.api2wire_String(encodedToken);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_receive_token(port_, arg0),
      parseSuccessData: _wire2api_transaction,
      constMeta: kReceiveTokenConstMeta,
      argValues: [encodedToken],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReceiveTokenConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "receive_token",
        argNames: ["encodedToken"],
      );

  Future<Transaction> send(
      {required int amount, required String activeMint, dynamic hint}) {
    var arg0 = _platform.api2wire_u64(amount);
    var arg1 = _platform.api2wire_String(activeMint);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_send(port_, arg0, arg1),
      parseSuccessData: _wire2api_transaction,
      constMeta: kSendConstMeta,
      argValues: [amount, activeMint],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSendConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "send",
        argNames: ["amount", "activeMint"],
      );

  Future<RequestMintInfo> requestMint(
      {required int amount, required String mintUrl, dynamic hint}) {
    var arg0 = _platform.api2wire_u64(amount);
    var arg1 = _platform.api2wire_String(mintUrl);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_request_mint(port_, arg0, arg1),
      parseSuccessData: _wire2api_request_mint_info,
      constMeta: kRequestMintConstMeta,
      argValues: [amount, mintUrl],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRequestMintConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "request_mint",
        argNames: ["amount", "mintUrl"],
      );

  Future<void> mintToken(
      {required int amount,
      required String hash,
      required String mint,
      dynamic hint}) {
    var arg0 = _platform.api2wire_u64(amount);
    var arg1 = _platform.api2wire_String(hash);
    var arg2 = _platform.api2wire_String(mint);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_mint_token(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kMintTokenConstMeta,
      argValues: [amount, hash, mint],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMintTokenConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "mint_token",
        argNames: ["amount", "hash", "mint"],
      );

  Future<void> melt(
      {required int amount,
      required String invoice,
      required String mint,
      dynamic hint}) {
    var arg0 = _platform.api2wire_u64(amount);
    var arg1 = _platform.api2wire_String(invoice);
    var arg2 = _platform.api2wire_String(mint);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_melt(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kMeltConstMeta,
      argValues: [amount, invoice, mint],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMeltConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "melt",
        argNames: ["amount", "invoice", "mint"],
      );

  Future<InvoiceInfo> decodeInvoice({required String invoice, dynamic hint}) {
    var arg0 = _platform.api2wire_String(invoice);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_decode_invoice(port_, arg0),
      parseSuccessData: _wire2api_invoice_info,
      constMeta: kDecodeInvoiceConstMeta,
      argValues: [invoice],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDecodeInvoiceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "decode_invoice",
        argNames: ["invoice"],
      );

  Future<List<Transaction>> getTransactions({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_transactions(port_),
      parseSuccessData: _wire2api_list_transaction,
      constMeta: kGetTransactionsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetTransactionsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_transactions",
        argNames: [],
      );

  Future<List<Mint>> getMints({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_mints(port_),
      parseSuccessData: _wire2api_list_mint,
      constMeta: kGetMintsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetMintsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_mints",
        argNames: [],
      );

  Future<Mint?> getActiveMint({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_active_mint(port_),
      parseSuccessData: _wire2api_opt_box_autoadd_mint,
      constMeta: kGetActiveMintConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetActiveMintConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_active_mint",
        argNames: [],
      );

  Future<void> setActiveMint({String? mintUrl, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_String(mintUrl);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_active_mint(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSetActiveMintConstMeta,
      argValues: [mintUrl],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetActiveMintConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_active_mint",
        argNames: ["mintUrl"],
      );

  Future<TokenData> decodeToken({required String encodedToken, dynamic hint}) {
    var arg0 = _platform.api2wire_String(encodedToken);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_decode_token(port_, arg0),
      parseSuccessData: _wire2api_token_data,
      constMeta: kDecodeTokenConstMeta,
      argValues: [encodedToken],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDecodeTokenConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "decode_token",
        argNames: ["encodedToken"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  CashuTransaction _wire2api_box_autoadd_cashu_transaction(dynamic raw) {
    return _wire2api_cashu_transaction(raw);
  }

  LNTransaction _wire2api_box_autoadd_ln_transaction(dynamic raw) {
    return _wire2api_ln_transaction(raw);
  }

  Mint _wire2api_box_autoadd_mint(dynamic raw) {
    return _wire2api_mint(raw);
  }

  CashuTransaction _wire2api_cashu_transaction(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return CashuTransaction(
      id: _wire2api_opt_String(arr[0]),
      status: _wire2api_transaction_status(arr[1]),
      time: _wire2api_u64(arr[2]),
      amount: _wire2api_u64(arr[3]),
      mint: _wire2api_String(arr[4]),
      token: _wire2api_String(arr[5]),
    );
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  InvoiceInfo _wire2api_invoice_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return InvoiceInfo(
      amount: _wire2api_u64(arr[0]),
      hash: _wire2api_String(arr[1]),
      memo: _wire2api_opt_String(arr[2]),
    );
  }

  List<Mint> _wire2api_list_mint(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_mint).toList();
  }

  List<Transaction> _wire2api_list_transaction(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_transaction).toList();
  }

  LNTransaction _wire2api_ln_transaction(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return LNTransaction(
      id: _wire2api_opt_String(arr[0]),
      status: _wire2api_transaction_status(arr[1]),
      time: _wire2api_u64(arr[2]),
      amount: _wire2api_u64(arr[3]),
      mint: _wire2api_String(arr[4]),
      bolt11: _wire2api_String(arr[5]),
    );
  }

  Mint _wire2api_mint(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Mint(
      url: _wire2api_String(arr[0]),
      activeKeyset: _wire2api_opt_String(arr[1]),
      keysets: _wire2api_StringList(arr[2]),
    );
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  Mint? _wire2api_opt_box_autoadd_mint(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_mint(raw);
  }

  RequestMintInfo _wire2api_request_mint_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return RequestMintInfo(
      pr: _wire2api_String(arr[0]),
      hash: _wire2api_String(arr[1]),
    );
  }

  TokenData _wire2api_token_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TokenData(
      encodedToken: _wire2api_String(arr[0]),
      mint: _wire2api_String(arr[1]),
      amount: _wire2api_u64(arr[2]),
      memo: _wire2api_opt_String(arr[3]),
    );
  }

  Transaction _wire2api_transaction(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return Transaction_CashuTransaction(
          _wire2api_box_autoadd_cashu_transaction(raw[1]),
        );
      case 1:
        return Transaction_LNTransaction(
          _wire2api_box_autoadd_ln_transaction(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  TransactionStatus _wire2api_transaction_status(dynamic raw) {
    return TransactionStatus.values[raw as int];
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_transaction_status(TransactionStatus raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class RustPlatform extends FlutterRustBridgeBase<RustWire> {
  RustPlatform(ffi.DynamicLibrary dylib) : super(RustWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_StringList(List<String> raw) {
    final ans = inner.new_StringList_0(raw.length);
    for (var i = 0; i < raw.length; i++) {
      ans.ref.ptr[i] = api2wire_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_CashuTransaction> api2wire_box_autoadd_cashu_transaction(
      CashuTransaction raw) {
    final ptr = inner.new_box_autoadd_cashu_transaction_0();
    _api_fill_to_wire_cashu_transaction(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_LNTransaction> api2wire_box_autoadd_ln_transaction(
      LNTransaction raw) {
    final ptr = inner.new_box_autoadd_ln_transaction_0();
    _api_fill_to_wire_ln_transaction(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Transaction> api2wire_box_autoadd_transaction(
      Transaction raw) {
    final ptr = inner.new_box_autoadd_transaction_0();
    _api_fill_to_wire_transaction(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_cashu_transaction(
      CashuTransaction apiObj, ffi.Pointer<wire_CashuTransaction> wireObj) {
    _api_fill_to_wire_cashu_transaction(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_ln_transaction(
      LNTransaction apiObj, ffi.Pointer<wire_LNTransaction> wireObj) {
    _api_fill_to_wire_ln_transaction(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_transaction(
      Transaction apiObj, ffi.Pointer<wire_Transaction> wireObj) {
    _api_fill_to_wire_transaction(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_cashu_transaction(
      CashuTransaction apiObj, wire_CashuTransaction wireObj) {
    wireObj.id = api2wire_opt_String(apiObj.id);
    wireObj.status = api2wire_transaction_status(apiObj.status);
    wireObj.time = api2wire_u64(apiObj.time);
    wireObj.amount = api2wire_u64(apiObj.amount);
    wireObj.mint = api2wire_String(apiObj.mint);
    wireObj.token = api2wire_String(apiObj.token);
  }

  void _api_fill_to_wire_ln_transaction(
      LNTransaction apiObj, wire_LNTransaction wireObj) {
    wireObj.id = api2wire_opt_String(apiObj.id);
    wireObj.status = api2wire_transaction_status(apiObj.status);
    wireObj.time = api2wire_u64(apiObj.time);
    wireObj.amount = api2wire_u64(apiObj.amount);
    wireObj.mint = api2wire_String(apiObj.mint);
    wireObj.bolt11 = api2wire_String(apiObj.bolt11);
  }

  void _api_fill_to_wire_transaction(
      Transaction apiObj, wire_Transaction wireObj) {
    if (apiObj is Transaction_CashuTransaction) {
      var pre_field0 = api2wire_box_autoadd_cashu_transaction(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_Transaction_CashuTransaction();
      wireObj.kind.ref.CashuTransaction.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Transaction_LNTransaction) {
      var pre_field0 = api2wire_box_autoadd_ln_transaction(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_Transaction_LNTransaction();
      wireObj.kind.ref.LNTransaction.ref.field0 = pre_field0;
      return;
    }
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class RustWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_init_db(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_init_db(
      port_,
      path,
    );
  }

  late final _wire_init_dbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_init_db');
  late final _wire_init_db = _wire_init_dbPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_balances(
    int port_,
  ) {
    return _wire_get_balances(
      port_,
    );
  }

  late final _wire_get_balancesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_balances');
  late final _wire_get_balances =
      _wire_get_balancesPtr.asFunction<void Function(int)>();

  void wire_create_wallet(
    int port_,
    ffi.Pointer<wire_uint_8_list> url,
  ) {
    return _wire_create_wallet(
      port_,
      url,
    );
  }

  late final _wire_create_walletPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_create_wallet');
  late final _wire_create_wallet = _wire_create_walletPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_wallets(
    int port_,
  ) {
    return _wire_get_wallets(
      port_,
    );
  }

  late final _wire_get_walletsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_wallets');
  late final _wire_get_wallets =
      _wire_get_walletsPtr.asFunction<void Function(int)>();

  void wire_remove_wallet(
    int port_,
    ffi.Pointer<wire_uint_8_list> url,
  ) {
    return _wire_remove_wallet(
      port_,
      url,
    );
  }

  late final _wire_remove_walletPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_remove_wallet');
  late final _wire_remove_wallet = _wire_remove_walletPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_add_new_wallets(
    int port_,
    ffi.Pointer<wire_StringList> _mints,
  ) {
    return _wire_add_new_wallets(
      port_,
      _mints,
    );
  }

  late final _wire_add_new_walletsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_StringList>)>>('wire_add_new_wallets');
  late final _wire_add_new_wallets = _wire_add_new_walletsPtr
      .asFunction<void Function(int, ffi.Pointer<wire_StringList>)>();

  void wire_set_mints(
    int port_,
    ffi.Pointer<wire_StringList> mints,
  ) {
    return _wire_set_mints(
      port_,
      mints,
    );
  }

  late final _wire_set_mintsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_StringList>)>>('wire_set_mints');
  late final _wire_set_mints = _wire_set_mintsPtr
      .asFunction<void Function(int, ffi.Pointer<wire_StringList>)>();

  void wire_check_spendable(
    int port_,
    ffi.Pointer<wire_Transaction> transaction,
  ) {
    return _wire_check_spendable(
      port_,
      transaction,
    );
  }

  late final _wire_check_spendablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_Transaction>)>>('wire_check_spendable');
  late final _wire_check_spendable = _wire_check_spendablePtr
      .asFunction<void Function(int, ffi.Pointer<wire_Transaction>)>();

  void wire_receive_token(
    int port_,
    ffi.Pointer<wire_uint_8_list> encoded_token,
  ) {
    return _wire_receive_token(
      port_,
      encoded_token,
    );
  }

  late final _wire_receive_tokenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_receive_token');
  late final _wire_receive_token = _wire_receive_tokenPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_send(
    int port_,
    int amount,
    ffi.Pointer<wire_uint_8_list> active_mint,
  ) {
    return _wire_send(
      port_,
      amount,
      active_mint,
    );
  }

  late final _wire_sendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_send');
  late final _wire_send = _wire_sendPtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_request_mint(
    int port_,
    int amount,
    ffi.Pointer<wire_uint_8_list> mint_url,
  ) {
    return _wire_request_mint(
      port_,
      amount,
      mint_url,
    );
  }

  late final _wire_request_mintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_request_mint');
  late final _wire_request_mint = _wire_request_mintPtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_mint_token(
    int port_,
    int amount,
    ffi.Pointer<wire_uint_8_list> hash,
    ffi.Pointer<wire_uint_8_list> mint,
  ) {
    return _wire_mint_token(
      port_,
      amount,
      hash,
      mint,
    );
  }

  late final _wire_mint_tokenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Uint64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_mint_token');
  late final _wire_mint_token = _wire_mint_tokenPtr.asFunction<
      void Function(int, int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_melt(
    int port_,
    int amount,
    ffi.Pointer<wire_uint_8_list> invoice,
    ffi.Pointer<wire_uint_8_list> mint,
  ) {
    return _wire_melt(
      port_,
      amount,
      invoice,
      mint,
    );
  }

  late final _wire_meltPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Uint64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_melt');
  late final _wire_melt = _wire_meltPtr.asFunction<
      void Function(int, int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_decode_invoice(
    int port_,
    ffi.Pointer<wire_uint_8_list> invoice,
  ) {
    return _wire_decode_invoice(
      port_,
      invoice,
    );
  }

  late final _wire_decode_invoicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_decode_invoice');
  late final _wire_decode_invoice = _wire_decode_invoicePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_transactions(
    int port_,
  ) {
    return _wire_get_transactions(
      port_,
    );
  }

  late final _wire_get_transactionsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_transactions');
  late final _wire_get_transactions =
      _wire_get_transactionsPtr.asFunction<void Function(int)>();

  void wire_get_mints(
    int port_,
  ) {
    return _wire_get_mints(
      port_,
    );
  }

  late final _wire_get_mintsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_mints');
  late final _wire_get_mints =
      _wire_get_mintsPtr.asFunction<void Function(int)>();

  void wire_get_active_mint(
    int port_,
  ) {
    return _wire_get_active_mint(
      port_,
    );
  }

  late final _wire_get_active_mintPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_active_mint');
  late final _wire_get_active_mint =
      _wire_get_active_mintPtr.asFunction<void Function(int)>();

  void wire_set_active_mint(
    int port_,
    ffi.Pointer<wire_uint_8_list> mint_url,
  ) {
    return _wire_set_active_mint(
      port_,
      mint_url,
    );
  }

  late final _wire_set_active_mintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_set_active_mint');
  late final _wire_set_active_mint = _wire_set_active_mintPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_decode_token(
    int port_,
    ffi.Pointer<wire_uint_8_list> encoded_token,
  ) {
    return _wire_decode_token(
      port_,
      encoded_token,
    );
  }

  late final _wire_decode_tokenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_decode_token');
  late final _wire_decode_token = _wire_decode_tokenPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_StringList> new_StringList_0(
    int len,
  ) {
    return _new_StringList_0(
      len,
    );
  }

  late final _new_StringList_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_StringList> Function(ffi.Int32)>>(
      'new_StringList_0');
  late final _new_StringList_0 = _new_StringList_0Ptr
      .asFunction<ffi.Pointer<wire_StringList> Function(int)>();

  ffi.Pointer<wire_CashuTransaction> new_box_autoadd_cashu_transaction_0() {
    return _new_box_autoadd_cashu_transaction_0();
  }

  late final _new_box_autoadd_cashu_transaction_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_CashuTransaction> Function()>>(
      'new_box_autoadd_cashu_transaction_0');
  late final _new_box_autoadd_cashu_transaction_0 =
      _new_box_autoadd_cashu_transaction_0Ptr
          .asFunction<ffi.Pointer<wire_CashuTransaction> Function()>();

  ffi.Pointer<wire_LNTransaction> new_box_autoadd_ln_transaction_0() {
    return _new_box_autoadd_ln_transaction_0();
  }

  late final _new_box_autoadd_ln_transaction_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_LNTransaction> Function()>>(
          'new_box_autoadd_ln_transaction_0');
  late final _new_box_autoadd_ln_transaction_0 =
      _new_box_autoadd_ln_transaction_0Ptr
          .asFunction<ffi.Pointer<wire_LNTransaction> Function()>();

  ffi.Pointer<wire_Transaction> new_box_autoadd_transaction_0() {
    return _new_box_autoadd_transaction_0();
  }

  late final _new_box_autoadd_transaction_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Transaction> Function()>>(
          'new_box_autoadd_transaction_0');
  late final _new_box_autoadd_transaction_0 = _new_box_autoadd_transaction_0Ptr
      .asFunction<ffi.Pointer<wire_Transaction> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  ffi.Pointer<TransactionKind> inflate_Transaction_CashuTransaction() {
    return _inflate_Transaction_CashuTransaction();
  }

  late final _inflate_Transaction_CashuTransactionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<TransactionKind> Function()>>(
          'inflate_Transaction_CashuTransaction');
  late final _inflate_Transaction_CashuTransaction =
      _inflate_Transaction_CashuTransactionPtr
          .asFunction<ffi.Pointer<TransactionKind> Function()>();

  ffi.Pointer<TransactionKind> inflate_Transaction_LNTransaction() {
    return _inflate_Transaction_LNTransaction();
  }

  late final _inflate_Transaction_LNTransactionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<TransactionKind> Function()>>(
          'inflate_Transaction_LNTransaction');
  late final _inflate_Transaction_LNTransaction =
      _inflate_Transaction_LNTransactionPtr
          .asFunction<ffi.Pointer<TransactionKind> Function()>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_StringList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_uint_8_list>> ptr;

  @ffi.Int32()
  external int len;
}

class wire_CashuTransaction extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> id;

  @ffi.Int32()
  external int status;

  @ffi.Uint64()
  external int time;

  @ffi.Uint64()
  external int amount;

  external ffi.Pointer<wire_uint_8_list> mint;

  external ffi.Pointer<wire_uint_8_list> token;
}

class wire_Transaction_CashuTransaction extends ffi.Struct {
  external ffi.Pointer<wire_CashuTransaction> field0;
}

class wire_LNTransaction extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> id;

  @ffi.Int32()
  external int status;

  @ffi.Uint64()
  external int time;

  @ffi.Uint64()
  external int amount;

  external ffi.Pointer<wire_uint_8_list> mint;

  external ffi.Pointer<wire_uint_8_list> bolt11;
}

class wire_Transaction_LNTransaction extends ffi.Struct {
  external ffi.Pointer<wire_LNTransaction> field0;
}

class TransactionKind extends ffi.Union {
  external ffi.Pointer<wire_Transaction_CashuTransaction> CashuTransaction;

  external ffi.Pointer<wire_Transaction_LNTransaction> LNTransaction;
}

class wire_Transaction extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<TransactionKind> kind;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
